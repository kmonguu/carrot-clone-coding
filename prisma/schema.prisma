
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String? @unique
  password String? 
  phone String? @unique
  github_id String? @unique
  avatar String?
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  tokens SMSToken[]
  products Product[]
  posts Post[]
  comments Comment[]
  likes Like[]
}

model SMSToken {
  id Int @id @default(autoincrement())
  token String @unique
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user User @relation(fields: [userId] , references: [id], onDelete: Cascade)
  userId Int
}

model Product {
  id Int @id @default(autoincrement())
  title String
  price Float
  description String
  image String
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user User @relation(fields: [userId] , references: [id], onDelete: Cascade)
  userId Int
}

model Post {
  id Int @id @default(autoincrement())
  title String 
  description String?
  view Int @default(0)
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  comments Comment[]
  likes Like[]

}

model Comment{
  id Int @id @default(autoincrement())
  payload  String
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id],onDelete: Cascade)
  userId Int
  postId Int
}

model Like{
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id],onDelete: Cascade)
  userId Int
  postId Int

  @@id(name: "id", [userId, postId])
}